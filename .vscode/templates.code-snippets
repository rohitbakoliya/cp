// {
// 	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
// 	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// 	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
// 	// same ids are connected.
// 	// Example:
// 	"basic template": {
// 		"prefix": "basic",
// 		"body": [
// 			"#include <bits/stdc++.h>",
// 			"using namespace std;",
// 			"#define int long long",
// 			"#define all(c) c.begin(), c.end()",
// 			"#define FAST ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);",
// 			"#define pii pair<int, int>",
// 			"#define pb push_back",
// 			"#define F first",
// 			"#define S second",
// 			"#define bitcnt(n) __builtin_popcountll(n)",
// 			"#define setpre(n) cout << fixed << setprecision(n)",
// 			"#define tr(c)                                 \\",
// 			"\tfor (const auto& x : c) cout << x << \" \"; \\",
// 			"\tcout << \"\\n\";",
// 			"#define PI acos(-1LL)",
// 			"",
// 			"const int M = 1000000007;",
// 			"const int N = 2e6 + 5;",
// 			"const long long INF = 2e18 + 12;",
// 			"",
// 			"void solve() {",
// 			"\t$0",
// 			"}",
// 			"",
// 			"signed main() {",
// 			"\tFAST int tc;",
// 			"\tcin >> tc;",
// 			"\twhile (tc--) {",
// 			"\t\tsolve();",
// 			"\t}",
// 			"}"
// 		],
// 		"description": "basic template with testcases"
// 	},
// 	"basic template notc": {
// 		"prefix": "basic_notc",
// 		"body": [
// 			"#include <bits/stdc++.h>",
// 			"using namespace std;",
// 			"#define int long long",
// 			"#define all(c) c.begin(), c.end()",
// 			"#define FAST ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);",
// 			"#define pii pair<int, int>",
// 			"#define pb push_back",
// 			"#define F first",
// 			"#define S second",
// 			"#define bitcnt(n) __builtin_popcountll(n)",
// 			"#define setpre(n) cout << fixed << setprecision(n)",
// 			"#define tr(c)                                 \\",
// 			"\tfor (const auto& x : c) cout << x << \" \"; \\",
// 			"\tcout << \"\\n\";",
// 			"#define PI acos(-1LL)",
// 			"",
// 			"const int M = 1000000007;",
// 			"const int N = 2e6 + 5;",
// 			"const long long INF = 2e18 + 12;",
// 			"",
// 			"void solve() {",
// 			"\t$0",
// 			"}",
// 			"",
// 			"signed main() {",
// 			"\tFAST",
// 			"\tsolve();",
// 			"}"
// 		],
// 		"description": "basic template without testcases"
// 	},
// 	"debug template": {
// 		"prefix": "debugger",
// 		"body": [
// 			"#ifdef LOCAL",
// 			"string to_string(const string &s) {",
// 			"    return '\"' + s + '\"';",
// 			"}",
// 			"string to_string(const char *s) {",
// 			"    return to_string((string) s);",
// 			"}",
// 			"string to_string(bool b) {",
// 			"    return (b ? \"true\" : \"false\");",
// 			"}",
// 			"template<typename A, typename B>",
// 			"string to_string(pair<A, B> p) {",
// 			"    return \"(\" + to_string(p.first) + ",
// 			" + to_string(p.second) + \")\";",
// 			"}",
// 			"template<typename T>",
// 			"string to_string(T v) {",
// 			"    bool first = true;",
// 			"    string res = \"{\";",
// 			"    for (const auto& x: v) {",
// 			"        if (!first) res += \", \";",
// 			"        first = false;",
// 			"        res += to_string(x);",
// 			"    }",
// 			"    res += \"}\";",
// 			"    return res;",
// 			"}",
// 			"",
// 			"void bug() { cerr << endl; }",
// 			"template<typename Head, typename... Tail>",
// 			"void bug(Head H, Tail... T) {",
// 			"    cerr << \" \" << to_string(H);",
// 			"    bug(T...);",
// 			"}",
// 			"#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", bug(__VA_ARGS__);",
// 			"#else",
// 			"#define debug(...) 11;",
// 			"#endif"
// 		],
// 		"description": "debugger template"
// 	},
// 	"kickstart template": {
// 		"prefix": "kickstart",
// 		"body": [
// 			"#include <bits/stdc++.h>",
// 			"using namespace std;",
// 			"",
// 			"#include <ext/pb_ds/assoc_container.hpp>",
// 			"#include <ext/pb_ds/tree_policy.hpp>",
// 			"using namespace __gnu_pbds;",
// 			"",
// 			"template <typename T>",
// 			"using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
// 			"",
// 			"#define FAST ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);",
// 			"#define int long long",
// 			"#define pii pair<int, int>",
// 			"#define pb push_back",
// 			"#define F first",
// 			"#define S second",
// 			"#define all(c) c.begin(), c.end()",
// 			"#define each(x, a) for (auto &x : a)",
// 			"#define sz(c) int32_t(c.size())",
// 			"#define bitcnt(n) __builtin_popcountll(n)",
// 			"#define setpre(n) cout << fixed << setprecision(n)",
// 			"#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))",
// 			"#define tr(c) each(x, c) cout << x << \" \";",
// 			"mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
// 			"",
// 			"template <typename T>",
// 			"istream &operator>>(istream &is, vector<T> &v) {",
// 			"\tfor (auto &data : v) is >> data;",
// 			"\treturn is;",
// 			"}",
// 			"",
// 			"template <typename T>",
// 			"ostream &operator<<(ostream &os, const vector<T> &v) {",
// 			"\tfor (auto &data : v) os << data << \" \";",
// 			"\treturn os;",
// 			"}",
// 			"",
// 			"template <typename T, typename U>",
// 			"istream &operator>>(istream &is, pair<T, U> &p) {",
// 			"\tis >> p.first >> p.second;",
// 			"\treturn is;",
// 			"}",
// 			"",
// 			"template <typename T, typename U>",
// 			"ostream &operator<<(ostream &os, pair<T, U> p) {",
// 			"\tos << p.first << ' ' << p.second;",
// 			"\treturn os;",
// 			"}",
// 			"",
// 			"template <typename... T>",
// 			"void read(T &...args) {",
// 			"\t((cin >> args), ...);",
// 			"}",
// 			"",
// 			"template <typename... T>",
// 			"void print(T... args) {",
// 			"\t((cout << args << \" \"), ...);",
// 			"\tcout << \"\\n\";",
// 			"}",
// 			"",
// 			"const int M = 1000000007;",
// 			"const int N = 2e6 + 5;",
// 			"const long long INF = 2e18 + 12;",
// 			"",
// 			"void solve() {",
// 			"\t$0",
// 			"}",
// 			"",
// 			"signed main() {",
// 			"\tFAST int tc;",
// 			"\tread(tc);",
// 			"\tfor (int t = 1; t <= tc; t++) {",
// 			"\t\tcout << \"Case #\" << t << \": \";",
// 			"\t\tsolve();",
// 			"\t}",
// 			"}"
// 		],
// 		"description": "kickstart template"
// 	},
// 	"complete with tc": {
// 		"body": [
// 			"#include <bits/stdc++.h>",
// 			"using namespace std;",
// 			"",
// 			"#include <ext/pb_ds/assoc_container.hpp>",
// 			"#include <ext/pb_ds/tree_policy.hpp>",
// 			"using namespace __gnu_pbds;",
// 			"",
// 			"template <typename T>",
// 			"using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
// 			"",
// 			"#define FAST ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);",
// 			"#define int long long",
// 			"#define pii pair<int, int>",
// 			"#define pb push_back",
// 			"#define F first",
// 			"#define S second",
// 			"#define all(c) c.begin(), c.end()",
// 			"#define each(x, a) for (auto &x : a)",
// 			"#define sz(c) int32_t(c.size())",
// 			"#define bitcnt(n) __builtin_popcountll(n)",
// 			"#define setpre(n) cout << fixed << setprecision(n)",
// 			"#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))",
// 			"#define tr(c) each(x, c) cout << x << \" \";",
// 			"mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
// 			"",
// 			"template <typename T>",
// 			"istream &operator>>(istream &is, vector<T> &v) {",
// 			"\tfor (auto &data : v) is >> data;",
// 			"\treturn is;",
// 			"}",
// 			"",
// 			"template <typename T>",
// 			"ostream &operator<<(ostream &os, const vector<T> &v) {",
// 			"\tfor (auto &data : v) os << data << \" \";",
// 			"\treturn os;",
// 			"}",
// 			"",
// 			"template <typename T, typename U>",
// 			"istream &operator>>(istream &is, pair<T, U> &p) {",
// 			"\tis >> p.first >> p.second;",
// 			"\treturn is;",
// 			"}",
// 			"",
// 			"template <typename T, typename U>",
// 			"ostream &operator<<(ostream &os, pair<T, U> p) {",
// 			"\tos << p.first << ' ' << p.second;",
// 			"\treturn os;",
// 			"}",
// 			"",
// 			"template <typename... T>",
// 			"void read(T &...args) {",
// 			"\t((cin >> args), ...);",
// 			"}",
// 			"",
// 			"template <typename... T>",
// 			"void print(T... args) {",
// 			"\t((cout << args << \" \"), ...);",
// 			"\tcout << \"\\n\";",
// 			"}",
// 			"",
// 			"const int M = 1000000007;",
// 			"const int N = 2e6 + 5;",
// 			"const long long INF = 2e18 + 12;",
// 			"",
// 			"void solve() {",
// 			"\t$0",
// 			"}",
// 			"",
// 			"signed main() {",
// 			"\tFAST int tc;",
// 			"\tread(tc);",
// 			"\twhile (tc--) {",
// 			"\t\tsolve();",
// 			"\t}",
// 			"}"
// 		],
// 		"description": "complete",
// 		"prefix": "complete"
// 	},
// 	"complete without tc": {
// 		"body": [
// 			"#include <bits/stdc++.h>",
// 			"using namespace std;",
// 			"",
// 			"#include <ext/pb_ds/assoc_container.hpp>",
// 			"#include <ext/pb_ds/tree_policy.hpp>",
// 			"using namespace __gnu_pbds;",
// 			"",
// 			"template <typename T>",
// 			"using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
// 			"",
// 			"#define FAST ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);",
// 			"#define int long long",
// 			"#define pii pair<int, int>",
// 			"#define pb push_back",
// 			"#define F first",
// 			"#define S second",
// 			"#define all(c) c.begin(), c.end()",
// 			"#define each(x, a) for (auto &x : a)",
// 			"#define sz(c) int32_t(c.size())",
// 			"#define bitcnt(n) __builtin_popcountll(n)",
// 			"#define setpre(n) cout << fixed << setprecision(n)",
// 			"#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))",
// 			"#define tr(c) each(x, c) cout << x << \" \";",
// 			"mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
// 			"",
// 			"template <typename T>",
// 			"istream &operator>>(istream &is, vector<T> &v) {",
// 			"\tfor (auto &data : v) is >> data;",
// 			"\treturn is;",
// 			"}",
// 			"",
// 			"template <typename T>",
// 			"ostream &operator<<(ostream &os, const vector<T> &v) {",
// 			"\tfor (auto &data : v) os << data << \" \";",
// 			"\treturn os;",
// 			"}",
// 			"",
// 			"template <typename T, typename U>",
// 			"istream &operator>>(istream &is, pair<T, U> &p) {",
// 			"\tis >> p.first >> p.second;",
// 			"\treturn is;",
// 			"}",
// 			"",
// 			"template <typename T, typename U>",
// 			"ostream &operator<<(ostream &os, pair<T, U> p) {",
// 			"\tos << p.first << ' ' << p.second;",
// 			"\treturn os;",
// 			"}",
// 			"",
// 			"template <typename... T>",
// 			"void read(T &...args) {",
// 			"\t((cin >> args), ...);",
// 			"}",
// 			"",
// 			"template <typename... T>",
// 			"void print(T... args) {",
// 			"\t((cout << args << \" \"), ...);",
// 			"\tcout << \"\\n\";",
// 			"}",
// 			"",
// 			"const int M = 1000000007;",
// 			"const int N = 2e6 + 5;",
// 			"const long long INF = 2e18 + 12;",
// 			"",
// 			"void solve() {",
// 			"\t$0",
// 			"}",
// 			"",
// 			"signed main() {",
// 			"\tFAST",
// 			"\tsolve();",
// 			"}"
// 		],
// 		"description": "complete",
// 		"prefix": "complete_notc"
// 	}
// }
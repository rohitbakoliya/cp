#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
#define sz(a) int((a).size())
#define int long long
#define all(c) c.begin(), c.end()
#define FAST ios_base::sync_with_stdio(false) , cin.tie(NULL);
#define pii pair< int , int >
#define pb push_back
#define F first
#define S second
#define endl "\n"
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define bitcnt(n) __builtin_popcountll(n)
#define tr(c) for(auto x : c )cout << x << " ";
#define ol(c , s , e ) for(int pos=s; pos<e ; pos++) cout << c[pos] << " ";
#define PI acos(-1)
const int M = 1000000007;
const int N=3e5+5;
double phi = 1.61803398875;


//using namespace __gnu_pbds;
 
//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set// set
//typedef tree<int,null_type,less_equal<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_multiset; // multiset




template<typename... T>
void in(T&... args){
    ((cin >> args) , ...);
}
template<typename... T >
void out(T... args){
    ((cout << args << " ") , ...);
}
template<typename... T >
void bug(T... __VA_ARGS__) {
    ((cerr << __VA_ARGS__ << " ") , ...);
}


///C++14 supported
#ifdef _tolong
    vector<int> v(n);
    in(v);
    out(v);
void in(){}
template<typename Head, typename... Tail>
void in(Head& H, Tail&... T){
    cin >> H;
    in(&T...);
}
void out(){cout << endl;}
template<typename Head, typename... Tail>
void out(Head H, Tail... T){
    cout << H << " ";
    out(T...);
}
#endif
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", bug(__VA_ARGS__)



inline double distance(int x1 , int y1 , int x2 , int y2){return sqrt((x1-x2+0.0)*(x1-x2+0.0)+(y1-y2+0.0)*(y1-y2+0.0))+0.0;}
int powmod(int a,int b){int res=1;a%=M;for(;b;b>>=1){if(b&1)res=res*a%M;a=a*a%M;}return res;}
int powmod(int a,int b,int M){int res=1;a%=M;for(;b;b>>=1){if(b&1)res=res*a%M;a=a*a%M;}return res;}
int NcR(int n,int r){int p=1,k=1;if(n-r<r)r=n-r;if(r!=0){while(r){p*=n;k*=r;int m=__gcd(p,k);p/=m;k/=m;n--;r--;}}else p=1;return p;}
signed main()
{


}


